#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 lightNormal;
in vec3 toCameraVector;
in float visibility;

layout(location = 0) out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float shinyDamper;
uniform float reflectivity;
uniform vec3 skyColor;

void main(void)
{
    vec3 unitNormal = normalize(surfaceNormal);
    vec3 unitLight = normalize(lightNormal);

    float dotProduct = dot(unitNormal, unitLight);
    float brightness = max(dotProduct, 0);
    vec3 light = brightness * lightColor;

    vec3 unitCameraVector = normalize(toCameraVector);
    vec3 lightDirection = -unitLight;
    vec3 reflectedVector = reflect(lightDirection, unitNormal);

    float dotP2 = dot(reflectedVector, unitCameraVector);
    dotP2 = max(dotP2, 0.0);
    float reflectedLight = pow(dotP2 / 10, shinyDamper);
    vec3 dampedColor = (reflectedLight * lightColor);


    vec4 texture = texture(textureSampler, pass_textureCoords);
    //Tsukuyomi: vec4(0, 0, 0, 1)
    out_Color = vec4(light,1.0) * vec4(texture.x + 0.2,texture.y + 0.2,texture.z + 0.2, 1)  + vec4(dampedColor, 1.0);
    out_Color = mix(vec4(vec3(skyColor.x,skyColor.y, skyColor.z), 0.0), out_Color, visibility);
}
